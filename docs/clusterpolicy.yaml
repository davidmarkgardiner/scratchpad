apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: prevent-duplicate-hostnames
  annotations:
    policies.kyverno.io/title: Prevent Duplicate Hostnames
    policies.kyverno.io/category: Networking
    policies.kyverno.io/severity: high
    policies.kyverno.io/subject: VirtualService
    policies.kyverno.io/description: >-
      This policy prevents VirtualServices from using hostnames that are already in use,
      which could lead to conflicts.
spec:
  validationFailureAction: enforce
  background: true
  rules:
  - name: check-hostname-uniqueness
    match:
      any:
      - resources:
          kinds:
          - "VirtualService"
    context:
    - name: v1beta1
      apiCall:
        urlPath: "/apis/networking.istio.io/v1beta1/virtualservices"
        jmesPath: "items"
    - name: v1alpha3
      apiCall:
        urlPath: "/apis/networking.istio.io/v1alpha3/virtualservices"
        jmesPath: "items"
    - name: allVirtualServices
      variables:
        value: "{{ v1beta1 || v1alpha3 || [] }}"
    preconditions:
      all:
      - key: "{{ request.object.spec.hosts || [] | length(@) }}"
        operator: GreaterThan
        value: 0
    validate:
      message: "Hostname '{{ element }}' is already in use by VirtualService '{{ allVirtualServices[?contains(spec.hosts, element) && (metadata.name != request.object.metadata.name || metadata.namespace != request.object.metadata.namespace)].metadata.name | [0] }}' in namespace '{{ allVirtualServices[?contains(spec.hosts, element) && (metadata.name != request.object.metadata.name || metadata.namespace != request.object.metadata.namespace)].metadata.namespace | [0] }}'"
      foreach:
      - list: "request.object.spec.hosts"
        deny:
          conditions:
            any:
            - key: "{{ allVirtualServices[?contains(spec.hosts, element) && (metadata.name != request.object.metadata.name || metadata.namespace != request.object.metadata.namespace)].metadata.name | length(@) }}"
              operator: GreaterThan
              value: 0