apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: replace-image-registry
  annotations:
    policies.kyverno.io/title: Replace Image Registry
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Sample
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    kyverno.io/kyverno-version: 1.7.2
    policies.kyverno.io/minversion: 1.6.0
    kyverno.io/kubernetes-version: "1.23"
    policies.kyverno.io/description: >-
      This policy mutates Pod image references to use the specified Azure Container Registry,
      validates image existence in ACR, and generates jobs to push missing images.
spec:
  background: false
  rules:
    - name: verify-images
      match:
        any:
        - resources:
            kinds:
            - Pod
      exclude:
        any:
        - resources:
            selector:
              matchLabels:
                skip-verify: "true"
      verifyImages:
      - imageReferences:
        - "*"
        repository: crdevacr2.azurecr.io
        required: false
        mutateDigest: false
    - name: generate-push-job
      match:
        any:
        - resources:
            kinds:
            - Pod
      exclude:
        any:
        - resources:
            selector:
              matchLabels:
                skip-verify: "true"
      preconditions:
        all:
        - key: "{{ images.verified.*.verified || `false` }}"
          operator: Equals
          value: false
      generate:
        apiVersion: batch/v1
        kind: Job
        name: "push-image-{{ request.uid | truncate(5, '') }}"
        namespace: "{{request.namespace}}"
        synchronize: false
        data:
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: "push-image-{{ request.uid | truncate(5, '') }}"
            labels:
              skip-verify: "true"
          spec:
            template:
              metadata:
                labels:
                  skip-verify: "true"
              spec:
                containers:
                - name: push-image
                  image: mcr.microsoft.com/azure-cli
                  env:
                  - name: AZURE_CLIENT_ID
                    valueFrom:
                      secretKeyRef:
                        name: acr-auth
                        key: client-id
                  - name: AZURE_CLIENT_SECRET
                    valueFrom:
                      secretKeyRef:
                        name: acr-auth
                        key: client-secret
                  - name: AZURE_TENANT_ID
                    valueFrom:
                      secretKeyRef:
                        name: acr-auth
                        key: tenant-id
                  command:
                  - /bin/bash
                  - -c
                  - |
                    set -e
                    echo "Starting image import process..."
                    
                    # Login to Azure using service principal
                    echo "Logging in to Azure..."
                    az login --service-principal \
                      --username $AZURE_CLIENT_ID \
                      --password $AZURE_CLIENT_SECRET \
                      --tenant $AZURE_TENANT_ID
                    
                    echo "Setting subscription..."
                    az account set -s xxxxx
                    
                    echo "Current subscription:"
                    az account show
                    
                    # Process each container image in the pod
                    {{- range $container := request.object.spec.containers }}
                    
                    # Extract original image details
                    ORIGINAL_IMAGE="{{ $container.image }}"
                    echo "Processing image: $ORIGINAL_IMAGE"
                    
                    # Parse image to extract components
                    if [[ $ORIGINAL_IMAGE == *"/"* && $ORIGINAL_IMAGE != *//* ]]; then
                      # Has registry or username
                      if [[ $ORIGINAL_IMAGE == *":"* ]]; then
                        # Has tag
                        if [[ $ORIGINAL_IMAGE == *"/"*"/"* ]]; then
                          # Has registry and repository path
                          REGISTRY=$(echo $ORIGINAL_IMAGE | cut -d'/' -f1)
                          REPO_PATH=$(echo $ORIGINAL_IMAGE | sed -e "s|$REGISTRY/||" -e 's|:[^/]*$||')
                          TAG=$(echo $ORIGINAL_IMAGE | sed 's|.*:||')
                          DEST_IMAGE="$REPO_PATH:$TAG"
                        else
                          # Has username/repo:tag format
                          REPO_PATH=$(echo $ORIGINAL_IMAGE | sed 's|:[^/]*$||')
                          TAG=$(echo $ORIGINAL_IMAGE | sed 's|.*:||')
                          DEST_IMAGE="$REPO_PATH:$TAG"
                        fi
                      else
                        # No tag, use latest
                        if [[ $ORIGINAL_IMAGE == *"/"*"/"* ]]; then
                          # Has registry and repository path
                          REGISTRY=$(echo $ORIGINAL_IMAGE | cut -d'/' -f1)
                          REPO_PATH=$(echo $ORIGINAL_IMAGE | sed -e "s|$REGISTRY/||")
                          DEST_IMAGE="$REPO_PATH:latest"
                        else
                          # Has username/repo format
                          DEST_IMAGE="$ORIGINAL_IMAGE:latest"
                        fi
                      fi
                    else
                      # No registry or username, just image name (library image)
                      if [[ $ORIGINAL_IMAGE == *":"* ]]; then
                        # Has tag
                        IMAGE_NAME=$(echo $ORIGINAL_IMAGE | cut -d':' -f1)
                        TAG=$(echo $ORIGINAL_IMAGE | cut -d':' -f2)
                        DEST_IMAGE="library/$IMAGE_NAME:$TAG"
                      else
                        # No tag, use latest
                        DEST_IMAGE="library/$ORIGINAL_IMAGE:latest"
                      fi
                    fi
                    
                    echo "Destination image path: $DEST_IMAGE"
                    
                    # Import the image to ACR
                    echo "Importing $ORIGINAL_IMAGE to ACR..."
                    az acr import \
                      --name crdevacr2 \
                      --source "$ORIGINAL_IMAGE" \
                      --image "$DEST_IMAGE"
                    
                    {{- end }}
                    
                    # Also process init containers if they exist
                    {{- if request.object.spec.initContainers }}
                    {{- range $initContainer := request.object.spec.initContainers }}
                    
                    # Extract original image details for init container
                    ORIGINAL_IMAGE="{{ $initContainer.image }}"
                    echo "Processing init container image: $ORIGINAL_IMAGE"
                    
                    # Parse image to extract components
                    if [[ $ORIGINAL_IMAGE == *"/"* && $ORIGINAL_IMAGE != *//* ]]; then
                      # Has registry or username
                      if [[ $ORIGINAL_IMAGE == *":"* ]]; then
                        # Has tag
                        if [[ $ORIGINAL_IMAGE == *"/"*"/"* ]]; then
                          # Has registry and repository path
                          REGISTRY=$(echo $ORIGINAL_IMAGE | cut -d'/' -f1)
                          REPO_PATH=$(echo $ORIGINAL_IMAGE | sed -e "s|$REGISTRY/||" -e 's|:[^/]*$||')
                          TAG=$(echo $ORIGINAL_IMAGE | sed 's|.*:||')
                          DEST_IMAGE="$REPO_PATH:$TAG"
                        else
                          # Has username/repo:tag format
                          REPO_PATH=$(echo $ORIGINAL_IMAGE | sed 's|:[^/]*$||')
                          TAG=$(echo $ORIGINAL_IMAGE | sed 's|.*:||')
                          DEST_IMAGE="$REPO_PATH:$TAG"
                        fi
                      else
                        # No tag, use latest
                        if [[ $ORIGINAL_IMAGE == *"/"*"/"* ]]; then
                          # Has registry and repository path
                          REGISTRY=$(echo $ORIGINAL_IMAGE | cut -d'/' -f1)
                          REPO_PATH=$(echo $ORIGINAL_IMAGE | sed -e "s|$REGISTRY/||")
                          DEST_IMAGE="$REPO_PATH:latest"
                        else
                          # Has username/repo format
                          DEST_IMAGE="$ORIGINAL_IMAGE:latest"
                        fi
                      fi
                    else
                      # No registry or username, just image name (library image)
                      if [[ $ORIGINAL_IMAGE == *":"* ]]; then
                        # Has tag
                        IMAGE_NAME=$(echo $ORIGINAL_IMAGE | cut -d':' -f1)
                        TAG=$(echo $ORIGINAL_IMAGE | cut -d':' -f2)
                        DEST_IMAGE="library/$IMAGE_NAME:$TAG"
                      else
                        # No tag, use latest
                        DEST_IMAGE="library/$ORIGINAL_IMAGE:latest"
                      fi
                    fi
                    
                    echo "Destination image path: $DEST_IMAGE"
                    
                    # Import the image to ACR
                    echo "Importing $ORIGINAL_IMAGE to ACR..."
                    az acr import \
                      --name crdevacr2 \
                      --source "$ORIGINAL_IMAGE" \
                      --image "$DEST_IMAGE"
                    
                    {{- end }}
                    {{- end }}
                    
                    echo "Image import process complete"
                restartPolicy: Never
            backoffLimit: 3
    - name: mutate-container-images
      match:
        any:
        - resources:
            kinds:
            - Pod
      exclude:
        any:
        - resources:
            selector:
              matchLabels:
                skip-verify: "true"
      preconditions:
        all:
        - key: "{{ images.verified.*.verified || `false` }}"
          operator: AnyIn
          value: 
          - true
          - false
      mutate:
        foreach:
        - list: "request.object.spec.containers"
          patchStrategicMerge:
            spec:
              containers:
              - name: "{{ element.name }}"
                image: "{{ regex_replace_all('^(localhost/|(?:[a-z0-9]+\\.)+[a-z0-9]+/)?(.*)$', element.image, 'crdevacr2.azurecr.io/$2') }}"
              imagePullSecrets:
              - name: "acr-secret"
    - name: mutate-init-container-images
      match:
        any:
        - resources:
            kinds:
            - Pod
      exclude:
        any:
        - resources:
            selector:
              matchLabels:
                skip-verify: "true"
      preconditions:
        all:
        - key: "{{ request.object.spec.initContainers[] || `[]` | length(@) }}"
          operator: GreaterThanOrEquals
          value: 1
      mutate:
        foreach:
        - list: "request.object.spec.initContainers"
          patchStrategicMerge:
            spec:
              initContainers:
              - name: "{{ element.name }}"
                image: "{{ regex_replace_all('^(localhost/|(?:[a-z0-9]+\\.)+[a-z0-9]+/)?(.*)$', element.image, 'crdevacr2.azurecr.io/$2') }}" 