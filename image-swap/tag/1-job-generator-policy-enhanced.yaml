apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: image-job-generator-per-image
  annotations:
    policies.kyverno.io/title: Image Push Job Generator (Once Per Image)
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Sample
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    kyverno.io/kyverno-version: 1.7.2
    policies.kyverno.io/minversion: 1.6.0
    kyverno.io/kubernetes-version: "1.23"
    policies.kyverno.io/description: >-
      This policy generates jobs with image information for images from my.registry.com only once per unique image.
spec:
  background: false
  rules:
    - name: generate-push-job
      match:
        any:
        - resources:
            kinds:
            - Pod
            - Job
            - CronJob
            namespaces:
            - default
            - a*
      exclude:
        any:
        - resources:
            selector:
              matchLabels:
                skip-verify: "true"
        - resources:
            namespaces:
              - kube-system
              - kyverno
      preconditions:
        all:
        # Combined condition to check for image path based on resource type
        - key: "{{ contains(request.object.spec.containers[0].image, 'my.registry.com/') || contains(request.object.spec.template.spec.containers[0].image, 'my.registry.com/') || contains(request.object.spec.jobTemplate.spec.template.spec.containers[0].image, 'my.registry.com/') }}"
          operator: Equals
          value: true
      generate:
        apiVersion: batch/v1
        kind: Job
        # Using only the image name for job, not the pod name
        name: "image-process-{{ replace('/', '-', regex_replace_all_literal('^.*\\.com/', images[0], '')) }}"
        namespace: "{{request.namespace}}"
        synchronize: true
        data:
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: "image-process-{{ replace('/', '-', regex_replace_all_literal('^.*\\.com/', images[0], '')) }}"
            labels:
              skip-verify: "true"
              image-info: "{{ replace('/', '-', regex_replace_all_literal('^.*\\.com/', images[0], '')) }}"
          spec:
            template:
              metadata:
                labels:
                  skip-verify: "true"
              spec:
                containers:
                - name: push-image
                  image: mcr.microsoft.com/azure-cli
                  env:
                  - name: RESOURCE_TYPE
                    value: "{{ request.object.kind }}"
                  - name: RESOURCE_NAME
                    value: "{{ request.object.metadata.name }}"
                  - name: RESOURCE_NAMESPACE
                    value: "{{ request.namespace }}"
                  - name: ORIGINAL_IMAGE
                    value: "{{ images[0] }}"
                  - name: IMAGE_INFO
                    value: "{{ regex_replace_all_literal('^.*\\.com/', images[0], '') }}"
                  - name: IMAGE_ID
                    value: "{{ replace('/', '-', regex_replace_all_literal('^.*\\.com/', images[0], '')) }}"
                  command:
                  - /bin/bash
                  - -c
                  - |
                    echo "Processing image information for $RESOURCE_TYPE $RESOURCE_NAME in namespace $RESOURCE_NAMESPACE"
                    echo "ORIGINAL_IMAGE: $ORIGINAL_IMAGE"
                    echo "IMAGE_INFO: $IMAGE_INFO"
                    echo "IMAGE_ID: $IMAGE_ID"
                    
                    # Extract just the image/version part by removing anything before the first slash
                    PURE_IMAGE=$(echo "$ORIGINAL_IMAGE" | sed 's|^.*/||')
                    echo "Pure image/version: $PURE_IMAGE"
                    
                    # Check if the image is from docker.io and change it to my.registry.com
                    if [[ $ORIGINAL_IMAGE == docker.io/* ]]; then
                      # Extract everything after docker.io/
                      IMAGE_PATH="${ORIGINAL_IMAGE#docker.io/}"
                      NEW_IMAGE="my.registry.com/$IMAGE_PATH"
                      echo "Image is from docker.io, changing to: $NEW_IMAGE"
                      
                      # Here you could add code to push the image to my.registry.com
                      # For example:
                      # az acr login --name myregistry
                      # docker pull $ORIGINAL_IMAGE
                      # docker tag $ORIGINAL_IMAGE $NEW_IMAGE
                      # docker push $NEW_IMAGE
                      
                      echo "Image transformation complete"
                    else
                      echo "Performing actions based on image information..."
                    fi
                    
                    sleep 30
                restartPolicy: Never
            backoffLimit: 3
            ttlSecondsAfterFinished: 300  # Auto-cleanup after 5 minutes 