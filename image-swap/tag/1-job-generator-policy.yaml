apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: image-job-generator
  annotations:
    policies.kyverno.io/title: Image Push Job Generator
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Sample
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    kyverno.io/kyverno-version: 1.7.2
    policies.kyverno.io/minversion: 1.6.0
    kyverno.io/kubernetes-version: "1.23"
    policies.kyverno.io/description: >-
      This policy generates jobs with image information for images from container-registry.xxx.net.
spec:
  background: false
  rules:
    - name: generate-push-job
      match:
        any:
        - resources:
            kinds:
            - Pod
            namespaces:
            - a*
      exclude:
        any:
        - resources:
            selector:
              matchLabels:
                skip-verify: "true"
        - resources:
            namespaces:
              - kube-system
              - kyverno
      preconditions:
        all:
        - key: "{{ contains(request.object.spec.containers[0].image, 'container-registry.xxx.net/') }}"
          operator: Equals
          value: true
      generate:
        apiVersion: batch/v1
        kind: Job
        name: "push-image-{{ regex_replace_all_literal('^.*\\.net/', request.object.spec.containers[0].image, '') | replace('/', '-') | replace(':', '-') }}"
        namespace: "{{request.namespace}}"
        synchronize: false
        data:
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: "push-image-{{ regex_replace_all_literal('^.*\\.net/', request.object.spec.containers[0].image, '') | replace('/', '-') | replace(':', '-') }}"
            labels:
              skip-verify: "true"
              image-info: "{{ regex_replace_all_literal('^.*\\.net/', request.object.spec.containers[0].image, '') | replace('/', '-') | replace(':', '-') }}"
          spec:
            template:
              metadata:
                labels:
                  skip-verify: "true"
              spec:
                containers:
                - name: push-image
                  image: mcr.microsoft.com/azure-cli
                  env:
                  - name: POD_NAME
                    value: "{{ request.object.metadata.name }}"
                  - name: POD_NAMESPACE
                    value: "{{ request.namespace }}"
                  - name: ORIGINAL_IMAGE
                    value: "{{ request.object.spec.containers[0].image }}"
                  - name: IMAGE_INFO
                    value: "{{ regex_replace_all_literal('^.*\\.net/', request.object.spec.containers[0].image, '') }}"
                  command:
                  - /bin/bash
                  - -c
                  - |
                    echo "Job processing image information for pod $POD_NAME in namespace $POD_NAMESPACE"
                    echo "ORIGINAL_IMAGE: $ORIGINAL_IMAGE"
                    echo "IMAGE_INFO: $IMAGE_INFO"
                    
                    # Extract just the image/version part by removing anything before the first slash
                    PURE_IMAGE=$(echo "$ORIGINAL_IMAGE" | sed 's|^.*/||')
                    echo "Pure image/version: $PURE_IMAGE"
                    
                    # Check if the image is from docker.io and change it to container-registry.xxx.net
                    if [[ $ORIGINAL_IMAGE == docker.io/* ]]; then
                      # Extract everything after docker.io/
                      IMAGE_PATH="${ORIGINAL_IMAGE#docker.io/}"
                      NEW_IMAGE="container-registry.xxx.net/$IMAGE_PATH"
                      echo "Image is from docker.io, changing to: $NEW_IMAGE"
                      
                      # Here you could add code to push the image to container-registry.xxx.net
                      # For example:
                      # az acr login --name containerregistryxxx
                      # docker pull $ORIGINAL_IMAGE
                      # docker tag $ORIGINAL_IMAGE $NEW_IMAGE
                      # docker push $NEW_IMAGE
                      
                      echo "Image transformation complete"
                    else
                      echo "Performing actions based on image information..."
                    fi
                    
                    sleep 30
                restartPolicy: Never
            backoffLimit: 3 