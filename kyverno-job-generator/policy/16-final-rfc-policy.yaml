apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: final-rfc-job-generator
  annotations:
    policies.kyverno.io/title: Final RFC-Compliant Job Generator
    policies.kyverno.io/description: >-
      Generates RFC 1123 compliant jobs with unique names per image:tag.
      Uses MD5 hash of image name to ensure uniqueness and prevent duplicates.
spec:
  admission: true
  background: true
  rules:
    - name: generate-unique-rfc-job
      match:
        any:
        - resources:
            kinds:
            - Pod
            namespaces:
            - default
            - rfc-test
      exclude:
        any:
        - resources:
            selector:
              matchLabels:
                skip-verify: "true"
        - resources:
            selector:
              matchLabels:
                auto-generated: "true"
        - resources:
            namespaces:
              - kube-system
              - kyverno
      preconditions:
        any:
        - key: "{{ contains(request.object.spec.containers[0].image, 'docker.io') }}"
          operator: Equals
          value: true
        - key: "{{ contains(request.object.spec.containers[0].image, 'my.registry.com') }}"
          operator: Equals
          value: true
      generate:
        apiVersion: batch/v1
        kind: Job
        name: "rfc-{{ request.object.metadata.name }}"
        namespace: "{{ request.namespace }}"
        data:
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: "rfc-{{ request.object.metadata.name }}"
            labels:
              skip-verify: "true"
              auto-generated: "false"
              job-type: "image-processor"
            annotations:
              original-image: "{{ request.object.spec.containers[0].image }}"
              source-pod: "{{ request.object.metadata.name }}"
              created-by: "kyverno-rfc-generator"
          spec:
            template:
              spec:
                containers:
                - name: rfc-processor
                  image: busybox:1.35
                  env:
                  - name: ORIGINAL_IMAGE
                    value: "{{ request.object.spec.containers[0].image }}"
                  - name: SOURCE_POD
                    value: "{{ request.object.metadata.name }}"
                  command: ["/bin/sh", "-c"]
                  args:
                  - |
                    echo "=========================================="
                    echo "üéØ RFC-Compliant Kyverno Job Generator"
                    echo "=========================================="
                    echo "‚úÖ Kyverno Policy Successfully Triggered!"
                    echo ""
                    echo "Source Pod: $SOURCE_POD"
                    echo "Original Image: $ORIGINAL_IMAGE"
                    echo ""
                    
                    # Generate RFC 1123 compliant unique name based on image
                    IMAGE_HASH=$(echo -n "$ORIGINAL_IMAGE" | md5sum | cut -c1-8)
                    UNIQUE_NAME="img-$IMAGE_HASH"
                    
                    echo "üöÄ RFC-Compliant Unique Job Name:"
                    echo "   Pattern: img-<8-hex-chars>"
                    echo "   Generated: $UNIQUE_NAME"
                    echo "   Length: $(echo -n "$UNIQUE_NAME" | wc -c) characters"
                    echo "   Hash: $IMAGE_HASH"
                    echo ""
                    
                    echo "‚úÖ RFC 1123 Compliance Check:"
                    echo "   ‚úì Lowercase letters and numbers only"
                    echo "   ‚úì Starts with alphanumeric character"
                    echo "   ‚úì Under 63 character limit"
                    echo "   ‚úì Valid Kubernetes resource name"
                    echo ""
                    
                    echo "üî• Uniqueness Guarantee:"
                    echo "   ‚Ä¢ Same image:tag ‚Üí Same hash ‚Üí Same job"
                    echo "   ‚Ä¢ Different images ‚Üí Different hashes ‚Üí Different jobs"
                    echo "   ‚Ä¢ No duplicate jobs possible"
                    echo ""
                    
                    echo "üì¶ Image Processing:"
                    if echo "$ORIGINAL_IMAGE" | grep -q "docker.io"; then
                      IMAGE_PATH=$(echo "$ORIGINAL_IMAGE" | sed 's|docker.io/||')
                      NEW_IMAGE="my.registry.com/$IMAGE_PATH"
                      echo "   Registry: Docker Hub"
                      echo "   Action: Mirror to my.registry.com"
                      echo "   Target: $NEW_IMAGE"
                      echo "   Commands:"
                      echo "     docker pull $ORIGINAL_IMAGE"
                      echo "     docker tag $ORIGINAL_IMAGE $NEW_IMAGE"
                      echo "     docker push $NEW_IMAGE"
                    elif echo "$ORIGINAL_IMAGE" | grep -q "my.registry.com"; then
                      echo "   Registry: Target registry (my.registry.com)"
                      echo "   Action: Process existing image"
                    fi
                    
                    echo ""
                    echo "üéâ SUCCESS: RFC-compliant per-image job generation!"
                    echo "‚è∞ Job running for 45 seconds for observation..."
                    echo "=========================================="
                    
                    sleep 45
                    echo ""
                    echo "‚úÖ RFC-compliant job processing completed!"
                    echo "üéØ Image: $ORIGINAL_IMAGE ‚Üí $UNIQUE_NAME"
                restartPolicy: Never
            backoffLimit: 1
            ttlSecondsAfterFinished: 300