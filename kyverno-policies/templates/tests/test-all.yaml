apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}-test-all
  namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ .Release.Name }}-test-all
rules:
- apiGroups: ["kyverno.io"]
  resources: ["clusterpolicies"]
  verbs: ["get", "list"]
- apiGroups: ["security.istio.io"]
  resources: ["peerauthentications"]
  verbs: ["get", "list", "create", "delete"]
- apiGroups: ["wgpolicyk8s.io"]
  resources: ["policyreports"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "create", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "create", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ .Release.Name }}-test-all
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ .Release.Name }}-test-all
subjects:
- kind: ServiceAccount
  name: {{ .Release.Name }}-test-all
  namespace: {{ .Release.Namespace }}
---
apiVersion: v1
kind: Pod
metadata:
  name: {{ .Release.Name }}-test-all
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook: test
    helm.sh/hook-weight: "5"
spec:
  serviceAccountName: {{ .Release.Name }}-test-all
  containers:
  - name: test
    image: bitnami/kubectl:latest
    command:
    - /bin/bash
    - -c
    - |
      set -e
      
      # Print test header
      function print_header() {
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "🧪 Running Kyverno Policy Tests"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      }

      function cleanup {
        echo "🧹 Cleaning up test resources..."
        kubectl delete ns {{ .Release.Name }}-test-spot --ignore-not-found
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      }
      trap cleanup EXIT

      print_header
      
      # Wait for policies to be ready
      echo "⏳ Waiting for policies to be ready..."
      sleep 5
      
      echo "📋 Test Suite: Policy Readiness Check"
      echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      # Expected policies
      EXPECTED_POLICIES=(
        "audit-cluster-peerauthentication-mtls"
        "mutate-cluster-namespace-istiolabel"
        "mutate-ns-deployment-spotaffinity"
        "require-resource-limits"
        "validate-ns-istio-injection"
      )
      
      for policy in "${EXPECTED_POLICIES[@]}"; do
        echo "Testing: $policy"
        POLICY_STATUS=$(kubectl get clusterpolicy "$policy" -o json)
        if [ $? -ne 0 ]; then
          echo "❌ FAILED: Policy $policy not found"
          exit 1
        fi
        READY_STATUS=$(echo "$POLICY_STATUS" | jq -r '.status.ready')
        if [ "$READY_STATUS" != "true" ]; then
          echo "❌ FAILED: Policy $policy is not ready"
          echo "Status: $(echo "$POLICY_STATUS" | jq -r '.status.message')"
          exit 1
        fi
        echo "✅ PASSED: Policy $policy is ready and active"
      done
      
      echo -e "\n📋 Test Suite: Spot Affinity Policy"
      echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      echo "Creating test namespace with spot label..."
      # Create test namespace and deployment
      cat <<EOF | kubectl apply -f -
      apiVersion: v1
      kind: Namespace
      metadata:
        name: {{ .Release.Name }}-test-spot
        labels:
          worker-type: spot
      EOF
      
      echo "Creating test deployment..."
      cat <<EOF | kubectl apply -f -
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: test-deployment
        namespace: {{ .Release.Name }}-test-spot
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: test-app
        template:
          metadata:
            labels:
              app: test-app
          spec:
            containers:
            - name: nginx
              image: nginx:latest
      EOF
      
      echo "⏳ Waiting for deployment mutation..."
      sleep 10
      
      # Check deployment for spot affinity
      DEPLOYMENT=$(kubectl get deployment -n {{ .Release.Name }}-test-spot test-deployment -o json)
      
      echo "Checking spot configuration..."
      TOLERATIONS=$(echo "$DEPLOYMENT" | jq -r '.spec.template.spec.tolerations')
      if [[ $TOLERATIONS != *"kubernetes.azure.com/scalesetpriority"* ]]; then
        echo "❌ FAILED: Spot toleration not found"
        exit 1
      fi
      echo "✅ PASSED: Spot tolerations correctly applied"
      
      POD_ANTI_AFFINITY=$(echo "$DEPLOYMENT" | jq -r '.spec.template.spec.affinity.podAntiAffinity')
      if [[ $POD_ANTI_AFFINITY != *"kubernetes.io/hostname"* ]]; then
        echo "❌ FAILED: Pod anti-affinity not found"
        exit 1
      fi
      echo "✅ PASSED: Pod anti-affinity correctly configured"
      
      NODE_AFFINITY=$(echo "$DEPLOYMENT" | jq -r '.spec.template.spec.affinity.nodeAffinity')
      if [[ $NODE_AFFINITY != *"kubernetes.azure.com/scalesetpriority"* ]]; then
        echo "❌ FAILED: Node affinity for spot instances not found"
        exit 1
      fi
      echo "✅ PASSED: Node affinity correctly configured"
      
      echo -e "\n📋 Test Suite: mTLS Policy"
      echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      echo "ℹ️  SKIPPED: Istio not installed - To test mTLS policy, please install Istio first"
      
      echo -e "\n✨ All test suites completed successfully!"
  restartPolicy: Never 