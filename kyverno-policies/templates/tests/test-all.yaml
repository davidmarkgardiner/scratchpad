apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}-test-all
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook: test
    helm.sh/hook-delete-policy: hook-succeeded
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ .Release.Name }}-test-all
  annotations:
    helm.sh/hook: test
    helm.sh/hook-delete-policy: hook-succeeded
rules:
- apiGroups: ["kyverno.io"]
  resources: ["clusterpolicies"]
  verbs: ["get", "list"]
- apiGroups: ["security.istio.io"]
  resources: ["peerauthentications"]
  verbs: ["get", "list", "create", "delete"]
- apiGroups: ["wgpolicyk8s.io"]
  resources: ["policyreports"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "create", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "create", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ .Release.Name }}-test-all
  annotations:
    helm.sh/hook: test
    helm.sh/hook-delete-policy: hook-succeeded
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ .Release.Name }}-test-all
subjects:
- kind: ServiceAccount
  name: {{ .Release.Name }}-test-all
  namespace: {{ .Release.Namespace }}
---
apiVersion: v1
kind: Pod
metadata:
  name: {{ .Release.Name }}-test-all
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook: test
    helm.sh/hook-delete-policy: hook-succeeded
spec:
  serviceAccountName: {{ .Release.Name }}-test-all
  containers:
  - name: test
    image: bitnami/kubectl:latest
    command:
    - /bin/bash
    - -c
    - |
      set -e
      
      function cleanup {
        echo "üßπ Cleaning up test resources..."
        kubectl delete ns {{ .Release.Name }}-test-spot --ignore-not-found
      }
      trap cleanup EXIT
      
      # Wait for policies to be ready
      echo "‚è≥ Waiting for policies to be ready..."
      sleep 30
      
      echo "üîç Step 1: Testing Policy Readiness"
      # Expected policies
      EXPECTED_POLICIES=(
        "audit-cluster-peerauthentication-mtls"
        "mutate-cluster-namespace-istiolabel"
        "mutate-ns-deployment-spotaffinity"
        "require-resource-limits"
        "validate-ns-istio-injection"
      )
      
      for policy in "${EXPECTED_POLICIES[@]}"; do
        echo "Checking policy: $policy"
        POLICY_STATUS=$(kubectl get clusterpolicy "$policy" -o json)
        if [ $? -ne 0 ]; then
          echo "‚ùå Policy $policy not found"
          exit 1
        fi
        READY_STATUS=$(echo "$POLICY_STATUS" | jq -r '.status.ready')
        if [ "$READY_STATUS" != "true" ]; then
          echo "‚ùå Policy $policy is not ready"
          echo "Status: $(echo "$POLICY_STATUS" | jq -r '.status.message')"
          exit 1
        fi
        echo "‚úÖ Policy $policy is ready"
      done
      
      echo "üîç Step 2: Testing Spot Affinity Policy"
      # Create test namespace and deployment
      cat <<EOF | kubectl apply -f -
      apiVersion: v1
      kind: Namespace
      metadata:
        name: {{ .Release.Name }}-test-spot
        labels:
          worker-type: spot
      EOF
      
      cat <<EOF | kubectl apply -f -
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: test-deployment
        namespace: {{ .Release.Name }}-test-spot
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: test-app
        template:
          metadata:
            labels:
              app: test-app
          spec:
            containers:
            - name: nginx
              image: nginx:latest
      EOF
      
      echo "‚è≥ Waiting for deployment to be mutated..."
      sleep 10
      
      # Check deployment for spot affinity
      DEPLOYMENT=$(kubectl get deployment -n {{ .Release.Name }}-test-spot test-deployment -o json)
      
      TOLERATIONS=$(echo "$DEPLOYMENT" | jq -r '.spec.template.spec.tolerations')
      if [[ $TOLERATIONS != *"kubernetes.azure.com/scalesetpriority"* ]]; then
        echo "‚ùå Expected spot toleration not found"
        exit 1
      fi
      
      POD_ANTI_AFFINITY=$(echo "$DEPLOYMENT" | jq -r '.spec.template.spec.affinity.podAntiAffinity')
      if [[ $POD_ANTI_AFFINITY != *"kubernetes.io/hostname"* ]]; then
        echo "‚ùå Expected pod anti-affinity not found"
        exit 1
      fi
      
      NODE_AFFINITY=$(echo "$DEPLOYMENT" | jq -r '.spec.template.spec.affinity.nodeAffinity')
      if [[ $NODE_AFFINITY != *"kubernetes.azure.com/scalesetpriority"* ]]; then
        echo "‚ùå Expected node affinity for spot instances not found"
        exit 1
      fi
      
      echo "‚úÖ Spot affinity configuration correctly applied"
      
      echo "üîç Step 3: Testing mTLS Policy (Skipped - Istio not installed)"
      echo "‚ÑπÔ∏è  To test mTLS policy, please install Istio first"
      
      echo "‚úÖ All tests completed successfully!"
  restartPolicy: Never 