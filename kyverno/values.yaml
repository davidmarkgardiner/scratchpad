kubectl get svc -o custom-columns='NAME:.metadata.name,SELECTORS:.spec.selector'
# For each service, run:
kubectl get svc <service-name> -o jsonpath='{.spec.selector}'

admissionController:
  service:
    selector:
      app.kubernetes.io/component: admission-controller
      service-type: webhook
  metricsService:
    selector:
      app.kubernetes.io/component: admission-controller
      service-type: metrics

backgroundController:
  metricsService:
    selector:
      app.kubernetes.io/component: background-controller
      service-type: metrics

cleanupController:
  service:
    selector:
      app.kubernetes.io/component: cleanup-controller
      service-type: webhook
  metricsService:
    selector:
      app.kubernetes.io/component: cleanup-controller
      service-type: metrics

reportsController:
  metricsService:
    selector:
      app.kubernetes.io/component: reports-controller
      service-type: metrics

---


# Main Kyverno admission webhook service
service:
  port: 443
  type: ClusterIP
  selector:
    app: kyverno
    component: admission-webhook
    instance: primary

# Background Controller service
backgroundController:
  enabled: true
  service:
    port: 443
    type: ClusterIP
    selector:
      app: kyverno
      component: background-controller
      instance: worker

# Reports Controller service
reportsController:
  enabled: true
  service:
    port: 443
    type: ClusterIP
    selector:
      app: kyverno
      component: reports-controller
      instance: reporter

# Cleanup Controller service
cleanupController:
  enabled: true
  service:
    port: 443
    type: ClusterIP
    selector:
      app: kyverno
      component: cleanup-controller
      instance: cleaner

---

# Common configurations
commonLabels:
  app.kubernetes.io/part-of: kyverno
  app.kubernetes.io/managed-by: helm

# Main service configuration
replicaCount: 1
priorityClassName: system-cluster-critical

# Common security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 3000
  fsGroup: 2000
  seccompProfile:
    type: RuntimeDefault

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  privileged: false
  readOnlyRootFilesystem: true
  seccompProfile:
    type: RuntimeDefault

# Resource configuration
resources:
  limits:
    memory: 384Mi
    cpu: 500m
  requests:
    memory: 128Mi
    cpu: 100m

# Main service
service:
  port: 443
  type: ClusterIP
  selector:
    app: kyverno
    component: webhook
    tier: controller
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9443"

# Liveness and readiness probes
livenessProbe:
  httpGet:
    path: /health/liveness
    port: 9443
    scheme: HTTPS
  initialDelaySeconds: 15
  periodSeconds: 30
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /health/readiness
    port: 9443
    scheme: HTTPS
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

# Background Controller configuration
backgroundController:
  enabled: true
  rbac:
    create: true
  service:
    port: 443
    type: ClusterIP
    selector:
      app: kyverno
      component: background-scan
      tier: controller
  resources:
    limits:
      memory: 256Mi
      cpu: 300m
    requests:
      memory: 128Mi
      cpu: 100m
  securityContext:
    <<: *securityContext
  podSecurityContext:
    <<: *podSecurityContext
  livenessProbe:
    <<: *livenessProbe
  readinessProbe:
    <<: *readinessProbe

# Reports Controller configuration
reportsController:
  enabled: true
  rbac:
    create: true
  service:
    port: 443
    type: ClusterIP
    selector:
      app: kyverno
      component: reports
      tier: controller
  resources:
    limits:
      memory: 256Mi
      cpu: 300m
    requests:
      memory: 128Mi
      cpu: 100m
  securityContext:
    <<: *securityContext
  podSecurityContext:
    <<: *podSecurityContext
  livenessProbe:
    <<: *livenessProbe
  readinessProbe:
    <<: *readinessProbe

# Cleanup Controller config
